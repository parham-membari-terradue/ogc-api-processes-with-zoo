name: build
on:
  push:
    branches:
    - main

    paths:
    # Only rebuild website when apps have changed
    - containers/**
    - .github/**
    - docs/**
    - cwl-workflow/*.cwl


jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - run: pip install cwltool
    - run: cwl_list=$(ls cwl-workflows/*.cwl) 
    - run: |
        for var in $cwl_list
        do 
            echo "**********  Validating $var  **********"
            cwltool --validate --no-warnings $var
            echo "**********  Validation of $var is successful  **********"
            echo "******************************"
            echo "******************************"
        done
  
  version:
    needs: validate

    runs-on: ubuntu-latest

    outputs:
      app-version: ${{ steps.set-version.outputs.version }}

    steps:
    - uses: actions/checkout@v2
    - run: echo "APP_VERSION=$(cat codemeta.json | jq -r .version )" >> $GITHUB_ENV
    - run: echo app version is $APP_VERSION
    - id: set-version
      run: echo "::set-output name=version::$APP_VERSION"
  

  container-build:
    needs: version
    runs-on: ubuntu-latest

    steps:
        - uses: actions/checkout@v3

        - name: Log in to GitHub Container Registry
          run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

        - name: Build & push images
          run: |
            OWNER=${{ github.repository_owner }}
            REPO=${{ github.event.repository.name }}
            VERSION=${{ needs.version.outputs.app-version }}

            echo "Scanning for Dockerfiles..."
            for docker_file_path in $(find containers -name Dockerfile)
            do
                context_dir=$(dirname "$docker_file_path")
                step_name=$(basename "$context_dir")  # e.g. ogc-api-processes-client

                IMAGE_NAME=ghcr.io/$OWNER/$REPO/$step_name

                echo "Building $IMAGE_NAME:$VERSION from $docker_file_path"

                docker build \
                    -t $IMAGE_NAME:$VERSION \
                    -f "$docker_file_path" \
                    "$context_dir"

                docker tag $IMAGE_NAME:$VERSION $IMAGE_NAME:latest
                docker push $IMAGE_NAME:$VERSION
                docker push $IMAGE_NAME:latest
            done

  
#   create-release:

#     needs:
#     - container-build
#     - version

#     runs-on: ubuntu-latest

#     outputs:

#       upload_url: ${{ steps.set-upload-url.outputs.upload_url }}

#     steps:
#     - name: release
#       uses: actions/create-release@v1
#       id: create_release
#       with:
#         draft: false
#         prerelease: false
#         release_name: ${{needs.version.outputs.app-version}}
#         tag_name: ${{needs.version.outputs.app-version}}
#       env:
#         GITHUB_TOKEN: ${{ github.token }}
#     - id: set-upload-url
#       run: echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"
  


#   publish-artifacts:

#     needs:
#     - create-release
#     - version

#     runs-on: ubuntu-latest

#     strategy:
#       matrix:
#         step: [ogc-api-processes-client]

#     steps:
#     - uses: actions/checkout@v2
#     - run: |
#         OWNER=${{ github.repository_owner }}
#         REPO=${{ github.event.repository.name }}
#         IMAGE_NAME=ghcr.io/$OWNER/$REPO/${{ matrix.step }}
#         for step in ogc
#         do
#           tag="$IMAGE_NAME:${{needs.version.outputs.app-version}}"
#           docker pull ${tag}
#           shatag=$( docker inspect ${tag} | yq -r '.[0]["RepoDigests"][0]' )
#           for cwl in $(ls cwl-workflow/*.cwl)
#           do
#             s="${step}" t="${shatag}" yq -i eval '(.$graph[] | select (.id == env(s)) ).hints.DockerRequirement.dockerPull = env(t)' $cwl
#           done
#         done
#     - run: |
#         for cwl in $(ls cwl-workflow/*.cwl)
#         do
#           r=$( cat codemeta.json | jq -r ".codeRepository" ) yq -i eval '."s:codeRepository" = {"URL" : env(r)}' $cwl
#           v="${{needs.version.outputs.app-version}}" yq -i eval '."s:softwareVersion" = env(v)' $cwl
#           n=$(cat codemeta.json | jq -r '(.author[0].givenName + " " + .author[0].familyName)') \
#           e=$(cat codemeta.json | jq -r '.author[0].email') \
#           a=$(cat codemeta.json | jq -r '.author[0].affiliation["name"]') \
#           yq eval -i  '."s:author" += [{"class": "s:Person", "s.name": env(n), "s.email": env(e), "s.affiliation": env(a)}]' $cwl
#         done
#     - name: Cleanup downloads folder
#       run: rm -rf downloads/*
#     - run: |
#         mkdir downloads
#         for cwl in "app-water-bodies-cloud-native" "app-water-body-cloud-native" "app-water-body"
#         do
#           cp cwl-workflow/${cwl}.cwl downloads/${cwl}.${{needs.version.outputs.app-version}}.cwl
#         done
#     - uses: actions/upload-artifact@v4
#       with:
#         name: application-package-${{matrix.step}}
#         path: downloads
#         overwrite: true
#     - name: upload linux artifact 1
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ github.token }}
#       with:
#         upload_url: ${{needs.create-release.outputs.upload_url}}
#         asset_path: downloads/${{matrix.step}}.${{needs.version.outputs.app-version}}.cwl
#         asset_name: ${{matrix.step}}.${{needs.version.outputs.app-version}}.cwl
#         asset_content_type: text/yaml